priority -50
extends c
priority -49


snippet < "include <>"
#include <${1:iostream}>$0
endsnippet


snippet na "namespace anonoymous"
namespace {

$0

} // namespace
endsnippet


snippet ns "namespace"
namespace ${1:`!v expand('%:h:r')`} {


$0


} // namespace $1
endsnippet


snippet nss "namespace { namespace {"
namespace ${1:`!v expand('%:h:h')`} { namespace ${2:`!v expand('%:h:t')`} {


$0


}} // namespace $1::$2
endsnippet


snippet cl "simple class"
class ${1:`!v substitute(expand('%:t:r'), '\.\|\/', '_', 'g')`}
{
public:

	$0

private:

};
endsnippet


snippet class "simple class"
class ${1:`!v substitute(expand('%:t:r'), '\.\|\/', '_', 'g')`}
{
public:

	$1 ()
	{
	}


	$1 (const $1 &that)
	{
	}


	$1 ($1 &&that)
	{
	}


	~$1 ()
	{
	}


	$1 &operator= (const $1 &that)
	{
		return *this;
	}


	$1 &operator= ($1 &&that)
	{
		return *this;
	}


private:

	$0
};
endsnippet


snippet cld "class with default ctors/dtor"
class ${1:`!v substitute(expand('%:t:r'), '\.\|\/', '_', 'g')`}
{
public:

	$1 () = default;

	$1 (const $1 &that) = default;
	$1 ($1 &&that) = default;

	~$1 () = default;

	$1 &operator= (const $1 &that) = default;
	$1 &operator= ($1 &&that) = default;


private:

	$0
};
endsnippet


snippet fe "foreach"
for (auto &${1:it}: ${2:data})
{
	$0
}
endsnippet


snippet inline "inline function"
inline ${1:void} ${2:foo} ($3)
{
	$0
}
endsnippet


snippet try "try/catch"
try
{
	$0
}
catch (const ${1:std::exception} &e)
{
}
endsnippet


snippet sc "static_cast"
static_cast<$1>($2)$0
endsnippet


snippet rc "reinterpret_cast"
reinterpret_cast<$1>($2)$0
endsnippet


snippet cc "const_cast"
const_cast<$1>($2)$0
endsnippet
