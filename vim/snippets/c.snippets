#
# main
#
snippet main
int main (int argc, char const *argv[])
{
    ${0}
    return 0;
}
endsnippet

#
# include <>
#
snippet h<
#include <${1:stdio.h}>
endsnippet

#
# include ""
#
snippet h"
#include "${1:`!v expand('%:t:r')`.h}"
endsnippet

#
# if !defined() ... define ... endif
#
snippet g
#if !defined(${1:`!v substitute(expand('%'), '\.\|\/', '_', 'g')`_included})
#define $1


${0}


#endif // $1
endsnippet


#
# #if !defined(SYM) ... define SYM ... endif
#
snippet d
#if !defined(${1/([A-Za-z0-9_]+).*/$1/})
    #define ${1:SYMBOL} ${2:value}
#endif
${0}
endsnippet


#
# function
#
snippet ()
${1:void} ${2:foo} (${3})
{
    ${0}
}
endsnippet


#
# if
#
snippet if
if (${1}) {
    ${0}
}
endsnippet


#
#  el
#
snippet el
else {
    ${0}
}
endsnippet


# 
#  do
#
snippet do
do {
    ${0}
} while (${1});
endsnippet


#
#  wh
#
snippet wh
while (${1}) {
    ${0}
}
endsnippet


#
#  for
#
snippet for
for (${1:int} ${2:i} = 0;  $2 < ${3:count};  ++$2) {
    ${0}
}
endsnippet


#
#  fora
#
snippet fora
for (${1:int} ${2:i} = 0;  $2 < sizeof(${3:data})/sizeof($3[0]);  ++$2) {
    ${0}
}
endsnippet


#
#  sw
#
snippet sw
switch (${1}) {
    case ${2}:
        ${0}
        break;
}
endsnippet


#
#  st
#
snippet st
struct ${1:`!v substitute(expand('%:t:r'), '\.\|\/', '_', 'g')`_t}
{
    ${0}
};
endsnippet


#
#  en
#
snippet en
enum ${1:name}
{
    $2
};
endsnippet


#
#  /f
#
snippet /f
/**
 * \file ${1:`!v expand('%')`}
 * \brief ${2}
 */
${0}
endsnippet
