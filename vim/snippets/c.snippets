#
# main
#
snippet main
	int main (int argc, char const *argv[])
	{
		${1}
		return 0;
	}
#


#
# include <>
#
snippet <
	#include <${1}>${2}
#


#
# include ""
#
snippet "
	#include "${1}"${2}
#


#
# include guard
#
snippet g
	#if !defined(${1:`substitute(expand('%'), '\.\|\/', '_', 'g')`_included})
	#define $1


	${2}


	#endif // $1
#


#
# #if !defined(SYM) ... define SYM ... endif
#
snippet d
	#if !defined($1)
		#define ${1:SYMBOL} ${2:value}
	#endif
	${3}
#


#
# function
#
snippet ()
	${1:void} ${2:foo} (${3})
	{
		${4}
	}
#


#
# if
#
snippet if
	if (${1}) {
		${2}
	}
#


#
#  el
#
snippet el
	else {
		${1}
	}
#


# 
#  do
#
snippet do
	do {
		${2}
	} while (${1});
#


#
#  wh
#
snippet wh
	while (${1}) {
		${2}
	}
#


#
#  for
#
snippet for
	for (${1:int} ${2:i} = 0;  $2 != ${3:count};  ++$2) {
		${4}
	}
#


#
#  fora
#
snippet fora
	for (${1:int} ${2:i} = 0;  $2 < sizeof(${3:data})/sizeof($3[0]);  ++$2) {
		${4}
	}
#


#
#  sw
#
snippet sw
	switch (${1}) {
		case ${2}:
			${3}
			break;
	}
#


#
#  st
#
snippet st
	struct ${1:`substitute(expand('%:t:r'), '\.\|\/', '_', 'g')`_t}
	{
		${2}
	};
#


#
#  en
#
snippet en
	enum ${1:name}
	{
		${2}
	};
#


#
#  /f
#
snippet /f
	/**
	 * \file `expand('%')`
	 * \brief ${1}
	 */
	${2}
#
