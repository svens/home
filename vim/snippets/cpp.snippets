#
# ns
#
snippet ns
	namespace ${1:`expand('%:h:r')`} {


	${2}


	} // namespace $1
#


#
# nss
#
snippet nss
	namespace ${1:`expand('%:h:r')`} { namespace ${2:`expand('%:t:r')`} {


	${3}


	}} // namespace $1::$2
#


#
# fore
#
snippet fore
	for (auto &${1:i}: ${2}) {
		${3}
	}
#


#
# cl
#
snippet cl
	class ${1:`substitute(expand('%:t:r'), '\.\|\/', '_', 'g')`_t}
	{
	public:

		$1 (${2})
		{}


	private:

		${3}
	};
#


#
# cld
#
snippet cld
	class ${1:`substitute(expand('%:t:r'), '\.\|\/', '_', 'g')`_t}
	{
	public:

		$1 () = default;

		$1 ($1 const &that) = default;
		$1 ($1 &&that) noexcept = default;

		~$1 () = default;

		$1 &operator= ($1 const &that) = default;
		$1 &operator= ($1 &&that) noexcept = default;


	private:

		${2}
	};
#


#
# cle
#
snippet cle
	class ${1:`substitute(expand('%:t:r'), '\.\|\/', '_', 'g')`_t}
	{
	public:

		$1 ()
		{}


		$1 ($1 const &that)
		{}


		$1 ($1 &&that) noexcept
		{}


		~$1 ()
		{}


		$1 &operator= ($1 const &that)
		{
			return *this;
		}


		$1 &operator= ($1 &&that) noexcept
		{
			return *this;
		}


	private:

		${2}
	};
#


#
# try/catch
#
snippet try
	try {
		${3}
	}
	catch (${1:std::exception} const &e) {
		${2}
	}
#
