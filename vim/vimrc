" vim: set filetype=vim:

" setup Vundle and modules
set nocompatible
filetype off
set runtimepath+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'OrangeT/vim-csharp'
Plugin 'SirVer/ultisnips'
Plugin 'PProvost/vim-ps1'
call vundle#end()
filetype plugin indent on

" filetype specific stuff
autocmd filetype crontab setlocal nobackup nowritebackup

" allow secure per directory .vimrc
set secure
set exrc

syntax enable
set synmaxcol=180
set modelines=5


"
" encoding
"
set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8


"
" tabulation
"
"set expandtab
"set smarttab
"set shiftwidth=2


"
" search
"
set incsearch
set hlsearch
set wrapscan


"
" layout
"
set ruler
set showcmd
set cmdheight=1
set wildmenu
set wildmode=longest,list


"
" misc
"
set secure
set backspace=indent,eol,start
set autoindent
set nobackup
set history=50
set foldmethod=marker
set textwidth=78
set clipboard=unnamed


"
" Undo settings (will not outlive reboot)
"
if v:version >= 703
  set undofile
  set undodir=/tmp
endif


"
" GUI settings
"
set guifont=8x13
set guioptions-=m
set guioptions-=T
set guioptions-=r
set guicursor=a:block


"
" source editing stuff
"
set cinoptions=l1,g0,t0,j1,(1s,W4,m1,N-s
set formatoptions=tcroqln
set noshowmatch
set nowrap
let loaded_matchparen = 1
let c_no_curly_error = 1

"
" mappings
"

map Q gq

" searching
vnoremap // y/\V<C-R>"<CR>


let mapleader = ";"

" header/source switch
let extmap = { 'c': 'h', 'h': 'c', 'cpp': 'hpp', 'hpp': 'cpp', }
nmap <leader>s :exe "edit " . expand('%<') . '.' . extmap[expand('%:e')]<CR>

" wipe all deleted/unload buffers
command! -bar -bang Bwipeout call misc#bwipeout(<bang>0)


"
" UltiSnips
"
let g:UltiSnipsSnippetsDir = "~/.vim/UltiSnips"


"
" cscope & quickfix
"

if !filereadable(expand("%:p:h") . "/Makefile")
  set makeprg=clang++\ -std=c++2a\ -Wall\ -Wextra\ -Werror\ -Weffc++\ -Wfatal-errors\ -pedantic\ -o\ %<\ %
endif

nmap <leader>m :make<CR>:cw<CR>
nmap <leader>e :clist<CR>
nmap <leader>o :copen<CR>
nmap <leader>c :cclose<CR>

if has("cscope")
  set cscopetag cscopetagorder=1

  nmap <leader>fs :cscope find s <C-R>=expand("<cword>")<CR><CR>
  nmap <leader>fg :cscope find g <C-R>=expand("<cword>")<CR><CR>
  nmap <leader>fc :cscope find c <C-R>=expand("<cword>")<CR><CR>
  nmap <leader>ft :cscope find t <C-R>=expand("<cword>")<CR><CR>
  nmap <leader>fe :cscope find e <C-R>=expand("<cword>")<CR><CR>
  nmap <leader>ff :cscope find f <C-R>=expand("<cfile>")<CR><CR>
  nmap <leader>fi :cscope find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <leader>fd :cscope find d <C-R>=expand("<cword>")<CR><CR>

  nmap <leader>2s :scscope find s <C-R>=expand("<cword>")<CR><CR>
  nmap <leader>2g :scscope find g <C-R>=expand("<cword>")<CR><CR>
  nmap <leader>2c :scscope find c <C-R>=expand("<cword>")<CR><CR>
  nmap <leader>2t :scscope find t <C-R>=expand("<cword>")<CR><CR>
  nmap <leader>2e :scscope find e <C-R>=expand("<cword>")<CR><CR>
  nmap <leader>2f :scscope find f <C-R>=expand("<cfile>")<CR><CR>
  nmap <leader>2i :scscope find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <leader>2d :scscope find d <C-R>=expand("<cword>")<CR><CR>
endif

"
" load colors
"
color modest


"
" Create colorization group
"
match RightMargin /\%<80v.\%>79v/


"
" Show tabs and trailing whitespaces visually
"
set list listchars=tab:..,trail:.,extends:>,nbsp:_


"
" netrw settings
"
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_sort_sequence = '\/$,\.{h,c}pp$,*,\.swp$'
let g:netrw_sort_options = "i"
let g:netrw_dirhistmax = 0


"
" search over all buffers
"

function! BuffersList()
  let res = []
  for b in range(0, bufnr('$'))
    if buflisted(b)
      call add(res, bufname(b))
    endif
  endfor
  return res
endfunction

function! GrepBuffers (expression)
  exec 'vimgrep /'.a:expression.'/ '.join(BuffersList())
  exec 'copen'
endfunction

command! -nargs=+ GrepBufs call GrepBuffers(<q-args>)

nmap <leader>f :call GrepBuffers("<C-R><C-W>")<CR>
