" vim: set filetype=vim:

" setup Vundle and modules
set nocompatible
filetype off
set runtimepath+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'SirVer/ultisnips'
Plugin 'PProvost/vim-ps1'
call vundle#end()
filetype plugin indent on

" filetype specific stuff
autocmd filetype crontab setlocal nobackup nowritebackup

" allow secure per directory .vimrc
set secure
set exrc

syntax enable
set synmaxcol=180
set modelines=5


"
" encoding
"
set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8


"
" tabulation
"
set expandtab
set smarttab
set shiftwidth=2


"
" search
"
set incsearch
set hlsearch
set wrapscan


"
" layout
"
set ruler
set showcmd
set cmdheight=1
set wildmenu
set wildmode=longest,list


"
" misc
"
set secure
set backspace=indent,eol,start
set autoindent
set nobackup
set history=50
set foldmethod=marker
set textwidth=78


"
" Undo settings (will not outlive reboot)
"
if v:version >= 703
  set undofile
  set undodir=/tmp
endif


"
" GUI settings
"
set guifont=8x13
set guioptions-=m
set guioptions-=T
set guioptions-=r
set guicursor=a:block


"
" source editing stuff
"
set cinoptions=l1,g0,t0,j1,(1s,W4,m1,N-s
set formatoptions=tcroqln
set noshowmatch
set nowrap
let loaded_matchparen = 1
let c_no_curly_error = 1


"
" mappings
"
map Q gq

let mapleader = ";"
nmap <leader>s :e %:p:s,.hpp$,.X123X,:s,.cpp$,.hpp,:s,.X123X$,.cpp,<CR>


"
" UltiSnips
"
let g:UltiSnipsSnippetsDir = "~/.vim/UltiSnips"


"
" clang_complete, cscope & quickfix
"
set completeopt-=preview
let g:clang_complete_auto = 0
let g:clang_complete_copen = 0
let g:clang_hl_errors = 1
let g:clang_complete_macros = 1
let g:clang_complete_patterns = 1
let g:clang_conceal_snippets = 1
let g:clang_library_path = '/Library/Developer/CommandLineTools/usr/lib'
let g:clang_snippets = 1
" let g:clang_snippets_engine = 'ultisnips'
let g:clang_trailing_placeholder = 1
let g:clang_user_options = '-std=c++14 -Wall -Wextra -Weffc++ -Wno-pragma-once-outside-header -Wno-unused-parameter -Werror -pedantic'

if !filereadable(expand("%:p:h") . "/Makefile")
  set makeprg=clang++\ -std=c++14\ -Wall\ -Wextra\ -Werror\ -pedantic\ -o\ %<\ %
endif

" stop clang_complete to overwrite our beloved ctags keys
let g:clang_jumpto_declaration_key = 'undefined'
let g:clang_jumpto_declaration_in_preview_key = 'undefined'
let g:clang_jumpto_back_key = 'undefined'

nmap <leader>c :call g:ClangUpdateQuickFix()<CR>:cw<CR>
nmap <leader>g :call g:ClangGotoDeclaration()<CR>
nmap <leader>m :make<CR>:cw<CR>
nmap <leader>e :clist<CR>
nmap <leader>h :cclose<CR>

if has("cscope")
  set cscopetag cscopetagorder=1

  nmap <leader>fs :cscope find s <C-R>=expand("<cword>")<CR><CR>
  nmap <leader>fg :cscope find g <C-R>=expand("<cword>")<CR><CR>
  nmap <leader>fc :cscope find c <C-R>=expand("<cword>")<CR><CR>
  nmap <leader>ft :cscope find t <C-R>=expand("<cword>")<CR><CR>
  nmap <leader>fe :cscope find e <C-R>=expand("<cword>")<CR><CR>
  nmap <leader>ff :cscope find f <C-R>=expand("<cfile>")<CR><CR>
  nmap <leader>fi :cscope find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <leader>fd :cscope find d <C-R>=expand("<cword>")<CR><CR>

  nmap <leader>2s :scscope find s <C-R>=expand("<cword>")<CR><CR>
  nmap <leader>2g :scscope find g <C-R>=expand("<cword>")<CR><CR>
  nmap <leader>2c :scscope find c <C-R>=expand("<cword>")<CR><CR>
  nmap <leader>2t :scscope find t <C-R>=expand("<cword>")<CR><CR>
  nmap <leader>2e :scscope find e <C-R>=expand("<cword>")<CR><CR>
  nmap <leader>2f :scscope find f <C-R>=expand("<cfile>")<CR><CR>
  nmap <leader>2i :scscope find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <leader>2d :scscope find d <C-R>=expand("<cword>")<CR><CR>
endif

"
" load colors
"
color modest


"
" Create colorization group
"
match RightMargin /\%<80v.\%>79v/


"
" Show tabs and trailing whitespaces visually
"
set list listchars=tab:..,trail:.,extends:>,nbsp:_


"
" Disable netrw history
"
let g:netrw_dirhistmax = 0
